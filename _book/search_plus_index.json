{"./":{"url":"./","title":"前言","keywords":"","body":"小网管的运维晋级之路 介绍 readme Copyright © 2020 all right reserved，powered by Gitbook该文件编辑时间： 2020-05-15 18:03:57 "},"environment.html":{"url":"environment.html","title":"环境准备","keywords":"","body":"[toc] 主机环境 主机名 操作系统 配置 Test-1 Centos7 1核2G、硬盘100G Test-2 Centos7 1核2G、硬盘100G Test-3 Centos7 1核2G、硬盘100G 环境准备 安装操作系统CentOS-7 x86_64。 基本系统：1核2G、硬盘100G。 网络选择：使用网络地址转换（桥接）。 软件包选择：Minimal Install。 关闭iptables和SELinux。 设置所有节点的主机名和IP地址，同时使用内部DNS或者/etc/hosts做好主机名解析。 初始化脚本 wget -c http://download.opsbase.cn:8000/init/exec.sh # 远程脚本 bash exec.sh xxx-1 #!/bin/bash # -------------------------------------------------- #Author: LJ #Email: admin@attacker.club # bash templateos_init.sh TemplateOS function color_message() { case \"$1\" in \"warn\") echo -e \"\\e[1;31m$2\\e[0m\" ;; \"info\") echo -e \"\\e[1;33m$2\\e[0m\" ;; esac } function confirm() { read -p 'Are you sure to Continue?[Y/n]:' answer case $answer in Y | y) echo -e \"\\n\\t\\t\\e[44;37m Running the script \\e[0m\\n\" ;; N | n) echo -e \"\\n\\t\\t\\033[41;36mExit the script \\e[0m\\n\" && exit 0 ;; *) echo -e \"\\n\\t\\t\\033[41;36mError choice \\e[0m\\n\" && exit 1 ;; esac } confirm if [ $(id -u) -ne 0 ]; then color_message \"warn\" \"Use root to execute the program !\" exit 0 fi # 判断root权限 Init_Install() { Yum_aliyun_repo # Yum_lan_repo Yum_update_pkg Selinux_off Set_hostname $1 Set_iptables #Centos_init #Set_IP Set_dns Set_ntp Set_ssh Set_limits Set_profile Set_timezone Optimize_Performance #Set_passwd } Yum_aliyun_repo() { color_message \"info\" \"---- yum install ----\" # find /etc/yum.repos.d/ -type f ! -name \"*Base.repo\" -exec rm -f {} \\; mkdir /etc/yum.repos.d/tmp mv /etc/yum.repos.d/*repo /etc/yum.repos.d/tmp if [ $rhel_version = 6 ]; then wget -O /etc/yum.repos.d/alyun-Centos-7.repo http://mirrors.aliyun.com/repo/Centos-6.repo wget -O /etc/yum.repos.d/aliyun-epel6.repo http://mirrors.aliyun.com/repo/epel-6.repo elif [ $rhel_version = 7 ]; then curl -s http://mirrors.aliyun.com/repo/epel-7.repo >/etc/yum.repos.d/epel-7.repo curl -s http://mirrors.aliyun.com/repo/Centos-7.repo >/etc/yum.repos.d/aliyun-Centos7.repo else echo \"Unknown version\" fi } Yum_lan_repo() { color_message \"info\" \"---- yum install ----\" # find /etc/yum.repos.d/ -type f ! -name \"*Base.repo\" -exec rm -f {} \\; mkdir /etc/yum.repos.d/tmp && mv /etc/yum.repos.d/*repo /etc/yum.repos.d/tmp if [ $rhel_version = 6 ]; then wget -O /etc/yum.repos.d/alyun-Centos-7.repo http://yum.ops.net/repo/Centos-6.repo wget -O /etc/yum.repos.d/aliyun-epel6.repo http://yum.ops.net/repo/epel-6.repo elif [ $rhel_version = 7 ]; then curl -s http://yum.ops.net/repo/epel-7.repo >/etc/yum.repos.d/epel-7.repo curl -s http://yum.ops.net/repo/Centos-7.repo >/etc/yum.repos.d/aliyun-Centos7.repo else echo \"Unknown version\" fi } Yum_update_pkg() { #yum update -y #Update all packages yum install chronyd ntpdate -y # time yum install gcc gcc-c++ openssl-devel ntpdate nfs-utils libtool \\ openssl-perl ncurses-devel pcre-devel zlib zlib-devel unzip -y #base yum install nmap iotop sysstat dstat iftop nload iperf iproute net-tools \\ lrzsz wget vim-enhanced mlocate lsof telnet yum-utils dmidecode -y #tools #yum install OpenIPMI OpenIPMI-devel OpenIPMI-tools OpenIPMI-libs -y #物理机ipmi } Set_hostname() { #bash host_init.sh hostname 主机名传参 if [ $# -lt 1 ]; then #传参少于1个 color_message \"warn\" \"---- no set hostname ----\" HOSTNAME=\"TemplateOS\" #默认主机名TemplateOS else HOSTNAME=$1 fi if [ -f /etc/hostname ]; then echo \"$HOSTNAME\" >/etc/hostname fi sed -i \"/HOSTNAME/c HOSTNAME=$HOSTNAME\" /etc/sysconfig/network || echo \"HOSTNAME=$HOSTNAME\" >>/etc/sysconfig/network hostname $HOSTNAME grep $HOSTNAME /etc/hosts || echo \"127.0.0.1 $HOSTNAME\" >>/etc/hosts } Selinux_off() { color_message \"info\" \"---- close selinux ----\" if [ -s /etc/selinux/config ]; then setenforce 0 sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config fi } Set_iptables() { color_message \"info\" \"---- setup iptables ----\" if [ ! -f /etc/sysconfig/iptables ]; then yum install iptables-services -y chkconfig iptables on systemctl enable iptables systemctl disable firewalld systemctl stop firewalld service iptables restart fi iptables -F iptables -X iptables -t nat -F iptables -t nat -X iptables-save service iptables save } Centos_init() { if [ $rhel_version = 6 ]; then echo >/etc/udev/rules.d/70-persistent-net.rules &>/dev/null fi if [ $rhel_version = 7 ]; then cp /etc/sysconfig/grub /etc/sysconfig/grub.bak grub2-mkconfig -o /boot/grub2/grub.cfg # net.ifnames=0 biosdevname=0 systemctl disable NetworkManager systemctl stop NetworkManager echo >/etc/udev/rules.d/90-eno-fix.rules &>/dev/null fi } Set_IP() { color_message \"info\" \"static IPAddress\" WAN=$(route | grep default | head -1 | awk '{print $NF}') #外网出接口 IPADDR=$(ifconfig $WAN | grep inet | awk '{print $2}') NETMASK=$(ifconfig $WAN | grep inet | awk '{print $4}') GATEWAY=$(route -n | grep ^0.0.0.0 | awk '{print $2}') HWADDR=$(ifconfig $WAN | awk '/ether/ {print \"HWADDR=\"$2}') interface=$(ifconfig -a | grep mtu | grep -v $WAN | grep -v lo | awk -F: '{print $1}') ifcfg=\"/etc/sysconfig/network-scripts/ifcfg-eth\" mv ${ifcfg}-$WAN ${ifcfg}0 cat >${ifcfg}0 /etc/resolv.conf echo \"nameserver 223.6.6.6\" >>/etc/resolv.conf # 阿里云dns } Set_ntp() { color_message \"info\" \"dns\" grep ntpdate /var/spool/cron/root &>/dev/null || echo '*/3 * * * * ntpdate ntp.aliyun.com' >>/var/spool/cron/root # 默认使用阿里云时间服务 grep ntp.aliyun.com /etc/chrony.conf|| cat >/etc/chrony.conf /dev/null # 默认端口修改 grep '#UseDNS yes' /etc/ssh/sshd_config && sed -i \"s/#UseDNS yes/UseDNS no/g\" /etc/ssh/sshd_config grep '#AuthorizedKeysFile' /etc/ssh/sshd_config && sed -i \"s/#AuthorizedKeysFile/AuthorizedKeysFile/\" /etc/ssh/sshd_config grep 'GSSAPIAuthentication yes' /etc/ssh/sshd_config && sed -i \"s/GSSAPIAuthentication yes/GSSAPIAuthentication no/g\" /etc/ssh/sshd_config service sshd restart # sshd服务重启 } Set_limits() { color_message \"info\" \"limits\" chmod +x /etc/rc.local grep ulimit /etc/rc.local || echo ulimit -HSn 1048576 >>/etc/rc.local grep 1048576 /etc/security/limits.conf || cat >>/etc/security/limits.conf >/etc/profile grep HISTTIMEFORMAT /etc/profile || echo '''export HISTTIMEFORMAT=\"%F %T `whoami` \" ''' >>/etc/profile } Optimize_Performance() { color_message \"info\" \"kernel optimize \" grep 65535 /etc/sysctl.conf || cat >/etc/sysctl.conf Copyright © 2020 all right reserved，powered by Gitbook该文件编辑时间： 2020-05-15 17:58:54 "},"network/scripts.html":{"url":"network/scripts.html","title":"远程执行脚本","keywords":"","body":"[TOC] 介绍 使用脚本远程执行我们可以批量执行以及定时任务完成设备配置修改和备份。 telnetlib 模块 telnetlib 一个模拟tenet登录设备的python模块 #!/usr/bin/python2 # -*- coding: utf-8 -*- # -------------------------------------- # Author: LJ # Email: admin@attacker.club # Last Modified: 2018-06-22 22:38:37 # Description: python2 网络设备批量备份和ftp上传 # -------------------------------------- import telnetlib import time,datetime import sys import getpass reload(sys) sys.setdefaultencoding(\"utf-8\") def run(host): now = datetime.datetime.now() today = now.strftime('%Y%m%d') logdate = now.strftime(\"%b %d %H:%M:%S\") print(\"INFO:\\t%s\\t[\\033[1;32m%s\\033[0m] Trying to connect　...\" % (logdate, host)) try: telnetsession = telnetlib.Telnet(host, timeout=10) # 实例化telnet对象，建立一个主机连接 # 开启调试，按需开启，方便判断 # telnetsession.set_debuglevel(2) # read_until()来判断缓冲区中的数据是否有想要的内容，如果没有就等待 # 当然也可以使用expect方法，与read_until差不多，但是它可以支持正则表达式，功能要强大得多 telnetsession.write(user + \"\\n\") telnetsession.read_very_lazy() telnetsession.write(pwd + \"\\n\") # 如果登录成功，则出现类似,使用UsermodTag来进行捕获 response = telnetsession.read_until('>') if response.find('>') > -1: print(\"INFO:\\t%s\\t[\\033[1;32m%s\\033[0m] Login successfully　...\" % (logdate, host)) telnetsession.write(\"dis ip int b\\n\") output=telnetsession.read_until('>') print(output) telnetsession.write(\"save\\n\") output=telnetsession.read_until('N') print(output) telnetsession.write(\"y\\n\") # telnetsession.read_until('key') output=telnetsession.read_until('>') print(output) telnetsession.write(\"\\n\") response = telnetsession.read_until('Y/N') print(response) telnetsession.write(\"y\\n\") output=telnetsession.read_until('successfully') print(response) telnetsession.close() # 执行完毕后，关闭连接 print(\"1111\") except Exception as e: print(e, type(e)) finally: print(\"INFO:\\t%s\\t[\\033[1;32m%s\\033[0m] Session Close　...\" % (logdate, host)) if __name__ == '__main__': DEBUG = True #False # False 读取host.txt列表主机 # system-view模式如[R1] 来提示用户输入命令，所以取]为作为标志符 SysrmodTag = ']' if not DEBUG: with open(\"host.txt\") as f: for host in f: run(host) # 测试 else: user = 'admin' pwd = getpass.getpass() host = '172.16.8.10' run(host) Copyright © 2020 all right reserved，powered by Gitbook该文件编辑时间： 2020-05-15 17:33:13 "},"network/tp-link.html":{"url":"network/tp-link.html","title":"办公网无线 AP 部署改造 - TP-LINK","keywords":"","body":"办公网无线 AP 部署改造 现有环境弊端 1.无线设备太多信道会干扰 2.不能统一管理访问控制 3.性能不稳定，时常卡 4.跨办公室不能漫游 5.SSID信道混乱 之前也部署过华为、华三无线项目，此次考虑实施简易性和性价比，本方案使用 TP-link 设备重组企业内部无线网 规划 网段地址 企业网带宽 100M： 服务器有线网段： 10.0.0.0/22 研发无线线网段： 172.16.0.0/22 办公普通带宽 300M： 办公用户网段：192.168.15.0/23 wifi: XX-Office 密码：office123456 测试终端网段：192.168.10.0/23 wifi: XX-Test 密码: 123456 访客来宾：192.168.9.0/23 wifi: XX-Guest 密码：guest 无线 ap 架构 实施部署 三层交换机配置 interface GigabitEthernet0/0/13 description to POE-switch port link-type trunk port trunk pvid vlan 8 port trunk allow-pass vlan 2 to 4094 stp edged-port enable TL—AC300 配置 6/6 》 数量/在线状态 TL-SG3218P POE 交换机 报价 企业无线覆盖解决方案： https://service.tp-link.com.cn/detail_article_2302.html Copyright © 2020 all right reserved，powered by Gitbook该文件编辑时间： 2020-05-15 22:01:28 "},"basic_services/find.html":{"url":"basic_services/find.html","title":"find","keywords":"","body":"find 常用 find /home/admin /tmp /usr -name \\*.log(多个目录去找) find . -iname \\*.txt(大小写都匹配) find . -type d(当前目录下的所有子目录) find /usr -type l(当前目录下所有的符号链接) find /usr -type l -name \"z*\" -ls(符号链接的详细信息 eg:inode,目录) find /home/admin -size +250000k(超过250000k的文件，当然+改成-就是小于了) find /home/admin f -perm 777 -exec ls -l {} \\; (按照权限查询文件) find /home/admin -atime -1 1天内访问过的文件 find /home/admin -ctime -1 1天内状态改变过的文件 find /home/admin -mtime -1 1天内修改过的文件 find /home/admin -amin -1 1分钟内访问过的文件 find /home/admin -cmin -1 1分钟内状态改变过的文件 find /home/admin -mmin -1 1分钟内修改过的文件 find 搜索并执行 find . -name \"*.log\" -mtime +999 -type f -print -exec rm -f {} \\; #搜索大于6天，log后缀文件并执行删除动作 find 安全搜索 find / -uid 0 -perm -4000 -print find / -size +10000k -print| xargs du -sh|sort -nr #10M以上的文件 find / -name “…” -print find / -name “.. ” -print find / -name “. ” -print find / -name ” ” -print 注意SUID文件，可疑大于10M和空格文件 find / -name core -exec ls -l {} ;（检查系统中的core文件） 查看和拷贝文件 find / -type f -name \"vars.example\" | xargs -i cat {} # 查看内容 find / -type f -name \"vars.example\" | xargs -i cp {} . # copy文件 Copyright © 2020 all right reserved，powered by Gitbook该文件编辑时间： 2020-05-15 15:37:52 "},"basic_services/grep.html":{"url":"basic_services/grep.html","title":"grep","keywords":"","body":"grep 参数 参数 -c 只输出匹配行的个数。 -i 不区分大小写（只适用于单字符）。 -h 查询多文件时不显示文件名。 -l 查询多文件时只输出包含匹配字符的文件名。 -n 显示匹配行及行号。 -s 不显示不存在或无匹配文本的错误信息。 -v 显示不包含匹配文本的所有行（反向匹配）。 -V 显示软件版本信息 -E egrep 扩展的正则表达式 -P perl的正则 使用grep匹配时最好用双引号引起来，防止被系统误认为参数或者特殊命令，也可以匹配多个单词。 grep 精确匹配 grep \"\\\" file grep –w \"abc\" file # 精确匹配内容 grep –wc \"abc\" file # 精确匹配行数，wc -l grep 判断追加 grep PS /etc/profile || echo '''PS1=\"\\[\\e[37;1m\\][\\[\\e[32;1m\\]\\u\\[\\e[37;40m\\]@\\[\\e[34;1m\\]\\h \\[\\e[0m\\]\\t \\[\\e[35;1m\\]\\W\\[\\e[37;1m\\]]\\[\\e[m\\]/\\\\$\" ''' >>/etc/profile # 如果grep没有过滤到含'PS'的行,追加新内容到profile文件；这里使用||逻辑或判断 grep 多条件匹配 1.同时满足多个条件： fdisk -l |grep D|grep dev #套用两次grep过滤，查看物理硬盘 2.匹配任意条件 ethtool eno16777736 |egrep 'Speed|Duplex' #egrep增强命令,查看eno16777736网卡(物理机) 速度和双工模式 grep 搜索内容 1.字符串内容 grep -r copyright|grep index # r参数归档目录下所有文件，查找包含copyright并且是index文件名的文件 2.数字内容 cat /proc/meminfo |awk 'NR==1'|grep -o '[0-9]\\{1,\\}' # o参数显示匹配的内容，数字0-9范围，如果{1,99\\} 1行99位；查看内存大小 id|grep -oP \"\\d\"|head -1 # perl的正则 3.只列出文件 grep -rl localhost #搜索网站连接数据库的文件并只列出文件名 位置 seq 10 | grep 5 -A 3 #上匹配 seq 10 | grep 5 -B 3 #下匹配 seq 10 | grep 5 -C 1 #上下匹配 Copyright © 2020 all right reserved，powered by Gitbook该文件编辑时间： 2020-05-15 15:40:21 "},"basic_services/awk.html":{"url":"basic_services/awk.html","title":"awk","keywords":"","body":"显示指定行 cat /proc/meminfo |awk 'NR==1' #显示第一行 awk '/^[0-9]/ && NR==1 {print $1}' /data/hostlist # 过来数字开头而且是第一行，打印第一列；&&和||或 ifconfig |awk '/netmask/ && !/127/ {print $2}' # 匹配netmask 并匹配非127 分隔显示 cat /proc/meminfo |awk 'NR==1'|awk '{print $2}' #显示第二列 curl -s --head \"ops.attacker.club\"|awk '/HTTP/ {print $2}' #过滤关键字‘HTTP’的行并将第二列内容打印出来 正则 awk -F= '/^DEV/ {print \"网卡\"$2}' /etc/sysconfig/network-scripts/ifcfg-eth0 #正则搜索DEV大头的行，打印第二列网卡名 route -n | awk '$3~/252.0$/{print $1}'|uniq #正则匹配第三列掩码是252.0则打印第一列网络地址 docker images | awk '/rancher/||/busybox/ {print $3}'| xargs docker rmi #删除包含rancher或者busybox的容器id ip add |grep -vw lo |awk -F '[ /]+' '/inet/ {print $3}' #[空格:]多分隔符写法，以空格或冒号做分隔;\"+\"号是正则表达式，意思是匹配前面空格或冒号，两者之一的1个或1个以上。 awk '/ldb/ {print}' f.txt #匹配ldb awk '!/ldb/ {print}' f.txt #不匹配ldb awk '/ldb/ && /LISTEN/ {print}' f.txt #匹配ldb和LISTEN awk '$5 ~ /ldb/ {print}' f.txt #第五列匹配ldb 判断 repo=`df |grep dev |sort -nrk 2|head -1|awk '{if(length($NF)==1) print $NF\"repo\";else print $NF\"/repo\"}'` #最大分区做ftp家目录；是根目录不加 \"/\" grep Failed /var/log/secure |egrep -o '[0-9]{1,3}(\\.[0-9]{1,3}){3}' |sort |uniq -c|sort -nr | awk '{if($1 > 8) print $2}' # 过滤登录失败的ip地址，awk if如果第一列数字有8次以上则打印第二列ip信息 awk '{if(NR%5==0){print}}' your_file # 取出可以被5整除的数 awk '{if(NRBEGIN和END流程控制 https://linux.cn/article-7654-1.html （有时间再测。） 其他高级玩法 awk -F: '$3>=1000 {print $1}' /etc/passwd #第三列值大于等于1000则打印passwd第一列的用户名 awk -F: 'length($3)==2 {print $1}' /etc/passwd #第三列字符串是2位长度的，打印第一列用户名信息 #;查看是否存在空口令帐户 awk -F\\: '{system(\"passwd -S \"$1)}' /etc/passwd|awk '{print $1,$3}' #用system和bash执行命令;查看账户创建日期 awk -F\\: '{system(\"passwd -S \"$1)}' /etc/passwd|awk '{print $1,$3}' #同上 #过滤登录失败的ip地址，awk if如果第一列数字有8次以上则打印第二列ip信息 awk '$1> 8 {print $2}' #同上，效果 grep Failed /var/log/secure |egrep -o '[0-9]{1,3}(\\.[0-9]{1,3}){3}' |sort |uniq -c|sort -nr | awk '{if($1 > 8) print $2}' [0-9]{1,3}(\\.[0-9]{1,3}){3} [0-9]{1,3}：1-3位数字 \\.[0-9]{1,3}：小数点.后跟1-3位数字 (...){3}：前面括号中的组合重复3次 正则表达式中： .表示“单个任意字符” \\.表示“小数点” 关于IP地址,再提供一种更精确的写法： \\d表示“单个任意数字” ((\\d{1,3})\\.){3}(\\d{1,3})：与你的式子基本等价 ![\\.\\d])：后面不能有.或数字 Copyright © 2020 all right reserved，powered by Gitbook该文件编辑时间： 2020-05-15 15:44:16 "},"basic_services/sed.html":{"url":"basic_services/sed.html","title":"sed","keywords":"","body":"选项与参数： -n ：使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN 的数据一般都会被列出到终端上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。 -e ：直接在命令列模式上进行 sed 的动作编辑； -f ：直接将 sed 的动作写在一个文件内， -f filename 则可以运行 filename 内的 sed 动作； -r ：sed 的动作支持的是延伸型正规表示法的语法。(默认是基础正规表示法语法) -i ：直接修改读取的文件内容，而不是输出到终端。 动作说明： [n1[,n2]]function n1, n2 ：不见得会存在，一般代表『选择进行动作的行数』，举例来说，如果我的动作是需要在 10 到 20 行之间进行的，则『 10,20[动作行为] 』 function： a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～ c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！ d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚； i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)； p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～ s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！ 行内操作 删除 fdisk -l |cut -d \" \" -f 2-4 |grep dev|sed s/,// #查看磁盘大小;将','逗号删除 替换 sed 's/root/admin/g' file #将root替换为admin;类似vim参数s替换g全局匹配 前后插入字符 sed -ne 's/aaa/HELLO&/p' test #在aaa字符前面插入内容;输出结果：HELLOaaa sed -ne 's/aaa/&HELLO/p' test #在aaa字符后面插入内容;输出结果：aaaHELLO sed 's/^/HEAD&/g' file #在每行的头添加字符，比如\"HEAD\" sed 's/$/&TAIL/g' file #在每行的行尾添加字符，比如“TAIL” 换行、空格 nl /etc/passwd |sed '10a 1第十行后面开始插入三行\\n2\\n3 斜杠n是换行\\tt大空格' #换行\\n 空格\\t,空格键小空格 整行操作 搜索显示 nl /etc/passwd | sed -n '2p' #打印第二行,类似于awk NR==2 nl /etc/passwd | sed -n '5,7p' #打印5-7行 sed -n '/root/p' /etc/passwd #只显示包含root的行;参数-n只打印处理的行 sed '/nologin/d' /etc/passwd #删除包含nologin的行，其他输出;d 参数删除 删除行 sed -i '8d' file #删除第8行 nl /etc/passwd | sed '2d' #只要删除第2行 nl /etc/passwd | sed '2,5d' #删除2-5行 nl /etc/passwd | sed '3,$d' #要删除第3行到最后一行 sed /PATTERN/d file sed -i '/ulimit/d' /etc/rc.local #删除包含关键字的行 插入行：通过行号插入 nl /etc/passwd | sed '2,5c 2-5行被吃了' #2-5行替换成指定的内容 nl /etc/passwd | sed \"2i it's second line\" #第二行前面插入内容；参数i nl /etc/passwd | sed '2a The third line' #第二行下面插入内容；参数a 插入行：匹配关键字前后插入 sed -i \"/rm/i\\alias vi='vim'\" ~/.bashrc #在匹配的rm内容上面插入一条vim配置别名的行 grep vi ~/.bashrc || sed -i \"/mv/a\\alias vi='vim'\" ~/.bashrc #先判断vi内容是否存在，如果不存在则匹配到mv内容在下面插入一行； 插入行： 行首、行某插入 sed '1istart' /root/.bashrc #首行添加start字符串 sed '$a end.' /root/.bashrc #结尾添加end.内容 其他高级用法 sed 's/#.*//;/^$/ d' /etc/ssh/ssh_config #去掉空行和注释；替换#.*用空并将^$空格打头的内容删除;类似用法：egrep -v '^#|^$' /etc/ssh/ssh_config sed -i '/^#/d;/^$/d' /etc/openvpn/easy-rsa/2.0/vars #删除废话 sed -i \"/HOSTNAME/c HOSTNAME=OS\" /etc/sysconfig/network #搜索关键字，取代该行 sed -i '/HOSTNAME/d;a HOSTNAME=TemplateOS' /etc/sysconfig/network #删除包含hostname的行并重新新建 (替换推荐/c) sed \"/accesscore/c Hostname=`hostname`\" /etc/zabbix/zabbix_proxy.conf ` 变量使用双引号 单引号有转义功能 ifcfg=\"/etc/sysconfig/network-scripts/ifcfg-\" interface=`ifconfig -a |grep mtu|grep -v lo|awk -F: '{print $1}'` HWADDR=`ifconfig -a | awk '/ether/ {print \"HWADDR=\"$2}'` grep $HWADDR ${ifcfg}eth0 if [ $? = 1 ];then sed -i '/HWADDR/d' ${ifcfg}eth0 sed -i \"\\$a $HWADDR\" ${ifcfg}eth0 rm -f ${ifcfg}$(interface) && reboot fi #centos7 替换mac地址 Copyright © 2020 all right reserved，powered by Gitbook该文件编辑时间： 2020-05-15 16:08:57 "},"monitor/Smokeping.html":{"url":"monitor/Smokeping.html","title":"Smokeping","keywords":"","body":"Smokeping 网络链路监控 环境 centos 7 apache smokeping 部署 apache部署 yum -y install httpd httpd-devel gcc make curl wget 安装依赖库 yum -y install libxml2-devel libpng-devel glib pango pango-devel \\ freetype freetype-devel fontconfig cairo cairo-devel \\ libart_lgpl libart_lgpl-devel yum -y install perl-Sys-Syslog podofo mod_fcgid bind-utils 安装rrdrool yum -y install perl perl-Net-Telnet perl-Net-DNS perl-LDAP perl-libwww-perl \\ perl-RadiusPerl perl-IO-Socket-SSL perl-Socket6 perl-CGI-SpeedyCGI \\ perl-FCGI perl-CGI-SpeedCGI perl-Time-HiRes perl-ExtUtils-MakeMaker \\ perl-RRD-Simple rrdtool rrdtool-per 编译安装源码包 wget http://www.fping.org/dist/fping-3.10.tar.gz wget https://fossies.org/linux/misc/old/echoping-6.0.2.tar.gz wget http://oss.oetiker.ch/smokeping/pub/smokeping-2.6.9.tar.gz tar xf fping-3.10.tar.gz cd fping-3.10 ./configure make && make install tar xf echoping-6.0.2.tar.gz cd echoping-6.0.2 ./configure make && make install tar xf smokeping-2.6.9.tar.gz cd smokeping-2.6.9 ./setup/build-perl-modules.sh /usr/local/smokeping/thirdparty ./configure --prefix=/usr/local/smokeping /usr/bin/gmake install smokeping参数 # 创建cache var　data 三个目录和smokeping.log日志文件 cd /usr/local/smokeping/ mkdir cache data var # 刚刚创建的文件和目录授予apache权限，这里将整个smokeping都赋权 chown -R apache:apache /usr/local/smokeping/ # web文件 cd /usr/local/smokeping/htdocs mv smokeping.fcgi.dist smokeping.fcgi cd /usr/local/smokeping/etc mv config.dist config 配置文件 vim config cgiurl = http://some.url/smokeping.cgi #把some.url 改成本地IP或者域名 step = 60 #默认300 建议改为 60 ， 一分钟采集一次数据 修改验证密码文件权限 chmod 600 /usr/local/smokeping/etc/smokeping_secrets.dist 修改apache配置 /etc/httpd/conf/httpd.conf # 在DocumentRoot “/var/www/html” 这一行下添加如下代码： Alias /cache \"/usr/local/smokeping/cache/\" Alias /cropper \"/usr/local/smokeping/htdocs/cropper/\" Alias /smokeping \"/usr/local/smokeping/htdocs/smokeping.fcgi\" AllowOverride None Options All AddHandler cgi-script .fcgi .cgi Order allow,deny Allow from all AuthName \"Smokeping\" AuthType Basic AuthUserFile /usr/local/smokeping/htdocs/htpasswd Require valid-user DirectoryIndex smokeping.fcgi htpasswd -cd /usr/local/smokeping/htdocs/htpasswd admin # 添加web认证密码 解决中文乱码 yum -y install wqy-zenhei-fonts.noarch /usr/local/smokeping/etc/config *** Presentation *** charset = UTF-8 # 第50行左右添加字符编码 template = /usr/local/smokeping/etc/basepage.html.dist /usr/local/smokeping/lib/Smokeping/Graphs.pm \"DEF:maxping=$cfg->{General}{datadir}${host}.rrd:median:AVERAGE\", '--font TITLE:20:\"WenQuanYi Zen Hei Mono\"', #第149左右插入内容 'PRINT:maxping:MAX:%le' ); 添加检测项 /usr/local/smokeping/etc/config ########################################################### #+Test #menu= Targets ##parents = owner:/Test/James localtion:/ ...... #menu = Multihost #title = James and James as seen from Boomer #host = /Test/James /Test/James~boomer ########################################################### #以上几行可以直接删除，也可注释掉，没有用，下面添加监控项 # 监控节点样例如下，注意+是第一层，++是第二层，+++ 是第三层 + Other menu = 网络链路稳定性监控 title = 监控列表 ++ company menu = 公司监控 title = 网络监控列表 +++ xx-idc menu = 西溪机房防火墙 title = 西溪机房防火墙 alerts = someloss host = 183.136.xxx.xxx ++ public menu = 公共服务 title = 公共服务列表 +++ 114dns menu = 114.114.114.114 title = 114 DNS alerts = someloss host = 114.114.114.114 +++ aliyundns menu = 223.5.5.5 title = Aliyun DNS alerts = someloss host = 223.5.5.5 重启httpd,和smokeping服务 systemctl enable httpd grep smokeping /etc/rc.local || echo \"/usr/local/smokeping/bin/smokeping --restart\" >> /etc/rc.local # 开启启动 systemctl restart httpd #启动http /usr/local/smokeping/bin/smokeping --restart #启动smokeping 效果 扩展功能 告警设置 *** Alerts *** to = |/usr/local/smokeping/bin/alert.sh from = sentinel@huored.com +bigloss type = loss # in percent pattern = ==0%,==0%,==0%,==0%,>0%,>0%,>0% comment = suddenly there is packet loss +someloss type = loss # in percent pattern = >0%,*12*,>0%,*12*,>0% comment = loss 3 times in a row +startloss type = loss # in percent pattern = ==S,>0%,>0%,>0% comment = loss at startup +rttdetect type = rtt # in milli seconds pattern = 100,>100,>100 comment = routing messed up again ? +hostdown type = loss # in percent pattern = ==0%,==0%,==0%, ==U comment = no reply +lossdetect #我一般使用lossdetect 策略 type = loss # in percent pattern = ==0%,==0%,==0%,==0%,>20%,>20%,>20% comment = suddenly there is packet loss 检测类型 *** Probes *** + FPing binary = /usr/sbin/fping packetsize = 1048 #设置ping的包大小 + TCPPing # 检测端口，有些高防IP不让ping的 binary = /usr/local/smokeping/bin/tcpping-smokeping # tcpping是一个shell脚本并调用traceroute，测试:tcpping-smokeping -C -x 10 attacker 80 # https://github.com/tobbez/tcpping-smokeping pings = 5 port = 80 监控列表例子 ++ SD-JCZJ probe = TCPPing # 此处调用了tcpping来测试，不写的话默认是Fping menu=SD-JCZJ title=SD-JCZJ-XXXXXX alerts=lossdetect host=XXXXXXX 告警脚本 /usr/local/smokeping/bin/alert.sh ######################################################## # Script to email a mtr report on alert from Smokeping # ######################################################## alertname=$1 target=$2 losspattern=$3 rtt=$4 hostname=$5 smokename=\"ALIYUN-smokeping-\" if [ \"$losspattern\" = \"loss: 0%\" ]; then subject=\"Clear-${smokename}-Alert: $target host: ${hostname}\" else subject=\"${smokename}Alert: ${target} – ${hostname}\" fi echo \"MTR Report for hostname: ${hostname}\" > /tmp/mtr.txt echo \"\" >> /tmp/mtr.txt #echo \"sudo mtr -n –report ${hostname} \" #sudo /usr/sbin/mtr -n –report ${hostname} >> /tmp/mtr.txt #echo \"\" >> /tmp/mtr.txt echo \"Name of Alert: \" $alertname >> /tmp/mtr.txt echo \"Target: \" $target >> /tmp/mtr.txt echo \"Loss Pattern: \" $losspattern >> /tmp/mtr.txt echo \"RTT Pattern: \" $rtt >> /tmp/mtr.txt echo \"Hostname: \" $hostname >> /tmp/mtr.txt echo \"\" >> /tmp/mtr.txt #echo \"Full mtr command is: sudo /usr/sbin/mtr -n –report ${hostname}\" >> /tmp/mtr.txt echo \"subject: \" $subject if [ -s /tmp/mtr.txt ]; then echo \"----------------\" #cat /tmp/mtr.txt|mail -s \"${subject}\" $email Email=/usr/bin/sendEmail smtp=smtp.attacker.club #发件人SMTP服务器 user=info@attacker.club #发件人账号 passwd='xxxxxx' #发件人密码 #cc=admin@attacker.club #抄送 to=\"admin@attacker.club\" #收件人邮件地址 #subject=主题 body=$(cat /tmp/mtr.txt) $Email -f $user -s $smtp -xu $user -xp $passwd -t $to -u \"$subject\" -m \"$body\" -o message-charset=utf-8 fi smokeping 展示图分析 X 轴表示时间轴 Y 轴表示 ping 的时间值 3.6ms 表示 Ping 质量测试的响应速度平均值 中间红线能看出网络是否有抖动 直线表示稳定, 有频繁曲线表示网络抖动；如果是阴影表示有网络小幅度抖动 ls 字段表示 Ping 质量测试的丢包率 根据网络抖动判断，抖动范围超过 10ms 的都属于网络不稳定我们要每天观察是否都有规律的网络抖动现象! 从这个报告图里可以看出: 曲线都是绿色的 0 丢包或偶尔一两个丢包算合格 曲线无抖动, 阴影不明显或偶尔有抖动的算合格 (包裹阴影部分) 3.Ping 值小于 30ms 如果小于 50ms 还算合格 维护管理 /usr/local/smokeping/bin/smokeping --debug # debug rm /usr/local/smokeping/data/Other/* -rf && /usr/local/smokeping/bin/smokeping --restart # 清理数据 Copyright © 2020 all right reserved，powered by Gitbook该文件编辑时间： 2020-05-15 21:40:44 "}}